/*
 * MainFrame.java
 *
 * Created on 14. März 2006, 10:54
 */

package pdfsigner;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.image.ImageObserver;
import java.io.IOException;
import java.io.OutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.ByteArrayInputStream;
import java.text.AttributedCharacterIterator;
import java.util.*;
import java.security.*;
import java.security.cert.*;

import com.lowagie.text.pdf.PdfReader;
import com.lowagie.text.pdf.PdfWriter;
import com.lowagie.text.pdf.PdfStamper;
import com.lowagie.text.pdf.PdfSigGenericPKCS;
import com.lowagie.text.pdf.PdfLiteral;
import com.lowagie.text.pdf.PdfName;
import com.lowagie.text.pdf.PdfPKCS7;
import com.lowagie.text.pdf.PdfDictionary;
import com.lowagie.text.pdf.PdfString;
import com.lowagie.text.pdf.PdfSignatureAppearance;

/**
 *
 * @author  Patrick Hagelkruys
 * @mail patrick.hagelkruys@a-trust.at 
 */
public class MainFrame extends javax.swing.JFrame {
    
    private static String path = "";
    private static String ConfigFile = "config.ini";
    private java.util.Properties p;
    private char[] password;
    
    ArrayList keys;
    ArrayList keystores;
            
    class item
    {
        X509Certificate publicKey;
        PrivateKey privateKey;
        java.security.cert.Certificate[] certChain;
        String providerString;
        String pkcs11config;
        
        item(String _providerstring,String _pkcs11config, X509Certificate _publicKey, PrivateKey _privateKey, java.security.cert.Certificate[] _certChain)
        {
            pkcs11config = _pkcs11config;
            providerString = _providerstring;
            publicKey = _publicKey;
            privateKey = _privateKey;
            certChain = _certChain;
        }
    }
    
    /** Creates new form MainFrame */
    public MainFrame() {
        
        try
        {
            javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        }
        catch(Exception e)
        {}    
        p = null;
        try
        {
            p = new java.util.Properties();
            p.load(new java.io.FileInputStream(ConfigFile));
            
            //input = p.getProperty("input").toString();
        }
        catch (Exception e) 
        {
            System.out.println("Fehler beim lesen der Konfigurationsdatei: "+e);
            System.exit(1);
        }    
        
        keys = new ArrayList();
        keystores = new ArrayList();
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jDialog1 = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton5 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        pwdDialog = new javax.swing.JDialog();
        jPasswordField1 = new javax.swing.JPasswordField();
        jLabel8 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();

        jDialog1.setTitle("Zertifikatsauswahl");
        jDialog1.setAlwaysOnTop(true);
        jDialog1.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                jDialog1WindowActivated(evt);
            }
        });

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jList1);

        jButton5.setText("OK");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel6.setText("Bitte w\u00e4hlen Sie ein Zertifikat aus");

        jButton6.setText("Abbruch");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jDialog1Layout = new org.jdesktop.layout.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jDialog1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel6)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jDialog1Layout.createSequentialGroup()
                        .add(jButton6)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton5)))
                .addContainerGap())
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel6)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jDialog1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton5)
                    .add(jButton6))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pwdDialog.setBackground(java.awt.Color.lightGray);
        pwdDialog.setLocationByPlatform(true);
        pwdDialog.setResizable(false);

        jLabel8.setText("Bitte geben Sie das Password f\u00fcr das Softwarezertifikat ein:");

        jButton7.setText("weiter");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jButton7.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jButton7AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        org.jdesktop.layout.GroupLayout pwdDialogLayout = new org.jdesktop.layout.GroupLayout(pwdDialog.getContentPane());
        pwdDialog.getContentPane().setLayout(pwdDialogLayout);
        pwdDialogLayout.setHorizontalGroup(
            pwdDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pwdDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(pwdDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel8)
                    .add(jPasswordField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 234, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, pwdDialogLayout.createSequentialGroup()
                .addContainerGap(235, Short.MAX_VALUE)
                .add(jButton7)
                .addContainerGap())
        );
        pwdDialogLayout.setVerticalGroup(
            pwdDialogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pwdDialogLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel8)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPasswordField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton7)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("a.trust PDF Signer");
        setName("a.trust PDF Signer");
        jLabel1.setFont(new java.awt.Font("Verdana", 0, 12));
        jLabel1.setText("Welche PDF Datei wollen Sie signieren?");

        jTextField1.setFont(new java.awt.Font("Verdana", 0, 12));
        jTextField1.setEnabled(false);

        jButton1.setFont(new java.awt.Font("Verdana", 0, 12));
        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Verdana", 0, 12));
        jLabel2.setText("Wo soll die signierte Datei abgespeichert werden?");

        jTextField2.setFont(new java.awt.Font("Verdana", 0, 12));
        jTextField2.setEnabled(false);

        jButton2.setFont(new java.awt.Font("Verdana", 0, 12));
        jButton2.setText("...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Verdana", 0, 12));
        jLabel3.setText("Erweiterte PDF Eigenschaften:");

        jLabel4.setFont(new java.awt.Font("Verdana", 0, 12));
        jLabel4.setText("Grund der Signatur:");

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 12));
        jLabel5.setText("Ort der Signatur:");

        jButton3.setFont(new java.awt.Font("Verdana", 0, 12));
        jButton3.setText("Beenden");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Verdana", 0, 12));
        jButton4.setText("Signieren");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextField3.setFont(new java.awt.Font("Verdana", 0, 12));
        jTextField3.setText("Ich bin der Autor");

        jTextField4.setFont(new java.awt.Font("Verdana", 0, 12));
        jTextField4.setText("\u00d6sterreich");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("Verdana", 0, 12));
        jRadioButton2.setText("Signatur mit Softwarezertifikaten (P12)");
        jRadioButton2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButton2.setMargin(new java.awt.Insets(0, 0, 0, 0));

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("Verdana", 0, 12));
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Signatur mit SmartCard (PKCS#11)");
        jRadioButton1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jRadioButton1.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jLabel7.setFont(new java.awt.Font("Verdana", 0, 12));
        jLabel7.setText("Womit wollen Sie signieren?");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel7)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jRadioButton2)
                            .add(jRadioButton1)))
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 496, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 571, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel4)
                            .add(jLabel5))
                        .add(14, 14, 14)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jTextField4)
                            .add(jTextField3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 154, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 187, Short.MAX_VALUE)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jButton3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jButton4)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(10, 10, 10)
                                .add(jTextField2))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                                .add(10, 10, 10)
                                .add(jTextField1))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 530, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jButton2)
                            .add(jButton1))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel7)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButton1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jRadioButton2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel3)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel4)
                            .add(jTextField3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jLabel5)
                            .add(jTextField4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(29, 29, 29)
                        .add(jButton4)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton3)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton7AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jButton7AncestorAdded
// TODO add your handling code here:
    }//GEN-LAST:event_jButton7AncestorAdded

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
// TODO add your handling code here:
        password = jPasswordField1.getPassword();
        pwdDialog.setVisible(false);
        //pwdDialog.setModal(false);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jDialog1WindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jDialog1WindowActivated
// TODO add your handling code here:
        
        javax.swing.DefaultListModel listModel = new javax.swing.DefaultListModel();
        
        for( int i=0; i < keys.size(); i++)
        {
            item temp = (item) keys.get(i);
            String id = temp.publicKey.getSubjectDN().toString();
            int i1 = id.toLowerCase().indexOf("cn=")+3;
            int i2 = id.indexOf(",",i1);
            String name = id.substring(i1,i2);            
            i1 = id.toLowerCase().indexOf("serialnumber=")+13;
            i2 = id.indexOf(",",i1);
            name = name +", "+id.substring(i1,i2) +", "+ temp.publicKey.getSerialNumber().toString();
            System.out.println(id);
            
            listModel.add(i,name);
        }
        jList1.setModel(listModel);
        jList1.setSelectedIndex(0);
    }//GEN-LAST:event_jDialog1WindowActivated

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
// TODO add your handling code here:
        jDialog1.setVisible(false);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
// TODO add your handling code here:        
        jDialog1.setVisible(false);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
// TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
// TODO add your handling code here:

        if (jRadioButton1.isSelected() == true)
        {
            if (SignWithSmartCard() == true)
            {
                javax.swing.JOptionPane.showMessageDialog(this,"Die PDF Datei wurde erfolgreich signiert!","Erfolg!", javax.swing.JOptionPane.INFORMATION_MESSAGE);                
            } 
        }
        else
        {
            if (SignWithP12() == true)
            {
                javax.swing.JOptionPane.showMessageDialog(this,"Die PDF Datei wurde erfolgreich signiert!","Erfolg!", javax.swing.JOptionPane.INFORMATION_MESSAGE);                
            }
        }
        
        
    }
    
    private boolean SignWithP12(){
    
        javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
        fc.setMultiSelectionEnabled(true);
        fc.setDialogType(javax.swing.JFileChooser.OPEN_DIALOG);
        fc.setDialogTitle("Welches Softwarezetifikat möchten Sie zum signieren verwenden?");
        fc.setFileFilter(new javax.swing.filechooser.FileFilter(){
                public boolean accept(java.io.File f) {
                    String temp = f.getName().toLowerCase();
                    if (temp.endsWith(".p12")== true || 
                        temp.endsWith(".pfx")== true || 
                        temp.endsWith(".pem")== true ||
                        f.isDirectory() )
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                public String getDescription() {
                    return "Softwarezertifikate (*.p12, *.pfx, *.pem)";
                }
            }
        );

        String certFile = "";

        if (fc.showOpenDialog(null) == javax.swing.JFileChooser.APPROVE_OPTION) 
        {
            certFile = fc.getSelectedFile().getAbsolutePath();
        }
        else
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Es wurde kein Softwarezertifikat zum signieren angegeben!","Fehler", javax.swing.JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        jPasswordField1.setText("");
        pwdDialog.pack();
        pwdDialog.setModal(true);
        pwdDialog.setVisible(true);
        
        KeyStore ks = null;
        PrivateKey key = null;
        String alias;
        java.security.cert.Certificate[] chain = null;
        java.security.cert.X509Certificate certificate = null;
        try
        {
            ks = KeyStore.getInstance("pkcs12");
            ks.load(new FileInputStream(certFile), password);
            alias = (String)ks.aliases().nextElement();
            certificate = (java.security.cert.X509Certificate)ks.getCertificate(alias);
            key = (PrivateKey)ks.getKey(alias, password );
            chain = ks.getCertificateChain(alias);
        }
        catch(Exception e)
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Das Zertifikat (P12) konnte nicht geladen werden!","Fehler", javax.swing.JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        try
        {
            certificate.checkValidity();
            String issuer = certificate.getIssuerX500Principal().getName();
            //System.out.println(issuer);
            
            //System.out.println(issuer.indexOf(",O=A-Trust"));
            if(issuer.indexOf(",O=A-Trust") < 0)
            {
                javax.swing.JOptionPane.showMessageDialog(this,"Zertifikat ist nicht von a.trust!\nDieses Produkt funktioniert nur mit a.trust Produkten!","Fehler", javax.swing.JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        catch(Exception e)
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Dieses Zertifikat ist nicht gültig!","Fehler", javax.swing.JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        
        PdfReader reader;
        try
        {
            reader = new PdfReader(jTextField1.getText());
        }
        catch(Exception e)
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Auf die zu signierenden PDF Datei kann nicht zugegriffen werden!\n Datei: "+jTextField1.getText(),"Fehler", javax.swing.JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
       
        java.io.File temp = new java.io.File(jTextField1.getText());        
        java.io.FileOutputStream fout;
        try
        {
            fout = new java.io.FileOutputStream(jTextField2.getText());
        }
        catch (Exception e)
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Die Ausgabedatei konnte nicht angelegt werden!\n Datei: "+jTextField2.getText(),"Fehler", javax.swing.JOptionPane.ERROR_MESSAGE);
            return false;
        }        
        
        try
        {
            PdfStamper stp = PdfStamper.createSignature(reader, fout, '\0');
            PdfSignatureAppearance sap = stp.getSignatureAppearance();
            sap.setCrypto(key, chain, null, PdfSignatureAppearance.WINCER_SIGNED);
            sap.setReason(jTextField3.getText());
            sap.setLocation(jTextField4.getText());
            // comment next line to have an invisible signature
            //sap.setVisibleSignature(new Rectangle(100, 100, 400, 200), 1, null);
            stp.close();
        }
        catch(Exception e)
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Fehler beim Signieren!","Fehler", javax.swing.JOptionPane.ERROR_MESSAGE);
            return false;
        }   
        
        return true;
    }
    
    
    private boolean SignWithSmartCard(){
        int slots = 3;
        
        //String library = "c:/windows/system32/asignp11.dll";
        String library = path+"\\asignp11.dll";
        try
        {
            library = p.getProperty("library").toString();
            slots = Integer.parseInt(p.getProperty("slots").toString() );
        }
        catch(Exception e)
        {}
        
        
        
        for(int i=0; i < slots; i++)
        {
            KeyStore smartCardKeyStore;
            String providerstring = "asignp11_"+i;
            String pkcs11config = "name ="+providerstring+"\nlibrary = "+library+"\nslot="+i+"\n";
            System.out.println(pkcs11config);
            byte[] pkcs11configBytes = pkcs11config.getBytes();
            ByteArrayInputStream configStream = new ByteArrayInputStream(pkcs11configBytes);
            
            try
            {
                Provider pkcs11Provider = new sun.security.pkcs11.SunPKCS11(configStream);
                Security.addProvider(pkcs11Provider);
            
                smartCardKeyStore = KeyStore.getInstance("PKCS11",pkcs11Provider);
                smartCardKeyStore.load(null, null);
                
                keystores.add(providerstring);
                
                Enumeration aliasesEnum = smartCardKeyStore.aliases();
                while (aliasesEnum.hasMoreElements())
                {
                    
                    String alias = (String)aliasesEnum.nextElement();
                    System.out.println(alias);
                    if ( alias.equals("C.CH.EKEY") )
                    {
                        X509Certificate cert = (X509Certificate) smartCardKeyStore.getCertificate(alias);
                        PrivateKey privateKey = (PrivateKey) smartCardKeyStore.getKey(alias, null);                    
                        java.security.cert.Certificate[] chain = smartCardKeyStore.getCertificateChain(alias);
                        
                        item key =  new item(providerstring,pkcs11config,cert,privateKey,chain);
                        keys.add(key);
                    }
                }//ende while
                
                Security.removeProvider(providerstring);
            }
            catch(Exception e)
            {
                //e.printStackTrace();
            }
        }// ende for
        
        
        //System.out.println(keys.size());
        
        
        int index = 0;
        if (keys.size() <= 0)
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Es wurde keine passende Signaturkarte gefunden!","Fehler", javax.swing.JOptionPane.ERROR_MESSAGE);
            return false;
        }
        else if (keys.size() > 1)
        {
            // Dialog zu Signaturkartenauswahl einblenden
            jDialog1.pack();
            jDialog1.setModal(true);
            jDialog1.setVisible(true);
            
            index = jList1.getSelectedIndex();
        }
        
        item choice = (item)keys.get(index);
        
        // signieren
        PdfReader reader;
        try
        {
            reader = new PdfReader(jTextField1.getText());
        }
        catch(Exception e)
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Auf die zu signierenden PDF Datei kann nicht zugegriffen werden!","Fehler", javax.swing.JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        java.io.FileOutputStream fout;
        try
        {
            fout = new java.io.FileOutputStream(jTextField2.getText());
        }
        catch (Exception e)
        {
            javax.swing.JOptionPane.showMessageDialog(this,"Die Ausgabedatei konnte nicht angelegt werden!","Fehler", javax.swing.JOptionPane.ERROR_MESSAGE);
            keystoreclean();
            return false;
        }        

        try
        {
            byte[] pkcs11configBytes = choice.pkcs11config.getBytes();
            ByteArrayInputStream configStream = new ByteArrayInputStream(pkcs11configBytes);
            Provider pkcs11Provider = new sun.security.pkcs11.SunPKCS11(configStream);
            Security.addProvider(pkcs11Provider);
            
            PdfStamper stp = PdfStamper.createSignature(reader, fout, '\0');
            PdfSignatureAppearance sap = stp.getSignatureAppearance();
            sap.setProvider("SunPKCS11-"+choice.providerString);
            sap.setCrypto(choice.privateKey, choice.certChain, null, PdfSignatureAppearance.WINCER_SIGNED);
            sap.setReason(jTextField3.getText());
            sap.setLocation(jTextField4.getText());
            stp.close();                                

            Security.removeProvider(choice.providerString);
        }
        catch(Exception e)
        {
            //e.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this,"Fehler beim Signieren!","Fehler", javax.swing.JOptionPane.ERROR_MESSAGE);
            keystoreclean();
            return false;
        }
        
        keystoreclean();
        
        return true;
    }
    
    private void keystoreclean()
    {       
        keys.clear();
    }//GEN-LAST:event_jButton4ActionPerformed

    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
// TODO add your handling code here:
        javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
        fc.setCurrentDirectory(new java.io.File("."));
        fc.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        fc.setDialogTitle("Wo sollen die signierte PDF Dateien abgespeichert werden?");
        fc.setFileFilter(new javax.swing.filechooser.FileFilter() {
                public boolean accept(java.io.File f) {
                    return f.getName().toLowerCase().endsWith(".pdf") || f.isDirectory();
                }
                public String getDescription() {
                    return "PDF Datei (*.pdf)";
                }
            }
        );
        java.io.File FileName;
        
        if (fc.showOpenDialog(null) == javax.swing.JFileChooser.APPROVE_OPTION) 
        {
            FileName = fc.getSelectedFile();
        } else 
        {
            return;
        }
        
        if(FileName.getName().toLowerCase().endsWith(".pdf"))
        {
            jTextField2.setText(FileName.getAbsolutePath());        
        }
        else
        {
            jTextField2.setText(FileName.getAbsolutePath()+".pdf");        
        }
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
        
        javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
        fc.setDialogType(javax.swing.JFileChooser.OPEN_DIALOG);
        fc.setDialogTitle("Welche PDF Dateien sollen signiert werden?");
        fc.setFileFilter(new javax.swing.filechooser.FileFilter(){
                public boolean accept(java.io.File f) {
                    return f.getName().toLowerCase().endsWith(".pdf") || f.isDirectory();
                }
                public String getDescription() {
                    return "PDF Datei (*.pdf)";
                }
            }
        );
        
        java.io.File FileName;
        
        if (fc.showOpenDialog(null) == javax.swing.JFileChooser.APPROVE_OPTION) 
        {
            FileName = fc.getSelectedFile();
        }
        else
        {
            return;
        }
        
        jTextField1.setText(FileName.getAbsolutePath());
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        path = System.getProperty("user.dir");
        
        ConfigFile = path+"\\config.ini";
        //System.out.print(path);
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JDialog pwdDialog;
    // End of variables declaration//GEN-END:variables
    
}
